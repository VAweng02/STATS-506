---
title: "STATS 506 - Homework 4"
author: "Vincent Weng"
format:
  html:
    embed-resources: true
---

<h3>Problem 1 - Tidyverse</h3>

Use the tidyverse for this problem. In particular, use piping and dplyr as much as you are able. Note: Use of any deprecated functions will result in a point loss.

Install and load the package nycflights13.

```{r}
library(tidyverse) # using tidyverse
```

Part (A) - Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

Additionally,

Order both tables in descending mean delay.
Both tables should use the airport names not the airport codes.
Both tables should print all rows.
```{r}
library(nycflights13)

# tidyverse pipeline for departure
flights %>%
  group_by(origin) %>%
  summarize(mean_delay = mean(dep_delay, na.rm = TRUE),
            median_delay = median(dep_delay, na.rm = TRUE),
            total_flights = n()) %>%
  ungroup() %>%
  filter(total_flights >= 10) %>%
  rename(faa = origin) %>%
  left_join(airports, by = "faa") %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay))

# tidyverse pipeline for arrival
flights %>%
  group_by(dest) %>%
  summarize(mean_delay = mean(arr_delay, na.rm = TRUE),
            median_delay = median(arr_delay, na.rm = TRUE),
            total_flights = n()) %>%
  ungroup() %>%
  filter(total_flights >= 10) %>%
  rename(faa = dest) %>%
  left_join(airports, by = "faa") %>%
  select(name, mean_delay, median_delay) %>%
  arrange(desc(mean_delay)) %>%
  print(n=count(.))
```


Part (B) - How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.
```{r}
flights %>%
  left_join(planes, by="tailnum") %>%
  # calculate mph (distance per hour of flight)
  mutate(mph = distance / (air_time / 60)) %>%
  group_by(model) %>%
  # calculate average mph and total number of flights
  summarize(avg_mph = mean(mph, na.rm = TRUE), num_flights = n()) %>%
  arrange(desc(avg_mph)) %>%
  slice(1)
```





<h3>Problem 2 - get_temp()</h3>
```{r}
#' Computes monthly average temperature
#' @param month Integer or string. Month as a number (1-12), name, or abbrev.
#' @param year Integer. Year (between 1997 and 2000).
#' @param data Data frame with columns temp, month_numeric, and year.
#' @param celsius Logical. Default is 'FALSE'.
#' @param average_fn Function for average temp. Default is 'mean'.
#' @return Numeric. Average temperature.
get_temp <- function(month, year, data, celsius = FALSE, average_fn = mean) {

  # check numeric and string months
  if (is.numeric(month)) {
    # check month is valid
    if (month < 1 || month > 12) {
      stop("Invalid month: Numeric months must be between 1 and 12")
    }
  } else if (is.character(month)) {
    # check string is valid month or abbrev
    valid_months <- c("January", "February", "March", "April", "May", "June", 
                      "July", "August", "September", "October", "November", "December")
    abbrev_months <- substr(valid_months, 1, 3)  # get abbrev

    if (month %in% abbrev_months) {
      # if month is abbrev, find full month name
      month <- valid_months[which(abbrev_months == month)]
    } else if (!(month %in% valid_months)) {
      stop("Invalid month: Must be a valid month name or abbreviation")
    }

    # convert month to numeric
    month <- match(month, valid_months)
  } else {
    stop("Invalid month: Must be either numeric or a string")
  }

  # check year is numeric
  if (!is.numeric(year)) {
    stop("Invalid year: Must be numeric")
  }

  if (year > 2000 || year < 1997) {
    stop("Invalid year: Year is out of range")
  }

  # check average_fn is a function
  if (!is.function(average_fn)) {
    stop("Invalid average_fn: Must be a function")
  }

  # filter data and calculate the temp
  result <- data %>%
    select(temp, month_numeric, year) %>%
    rename(year_col = year) %>%
    filter(year_col == year, month_numeric == month) %>%
    summarize(average_temp = average_fn(temp)) %>%
    mutate(
      avg_temp_celsius = (average_temp - 32) * 5 / 9,
      final_avg_temp = if (isTRUE(celsius)) avg_temp_celsius else average_temp
    ) %>%
    pull(final_avg_temp)  # pull result as a numeric value

  return(result)
}


nnmaps <- read_csv("chicago-nmmaps.csv")
```

```{r}
get_temp("Apr", 1999, data = nnmaps)
```

```{r}
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
```

```{r}
get_temp(10, 1998, data = nnmaps, average_fn = median)
```

```{r}
tryCatch({
  get_temp(13, 1998, data = nnmaps)
}, error = function(e) {
  cat("Error: ", e$message, "\n")
})
```

```{r}
tryCatch({
  get_temp(2, 2005, data = nnmaps)
}, error = function(e) {
  cat("Error: ", e$message, "\n")
})
```

```{r}
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```


<h3>Problem 3 - Visualization</h3>

Note: This is, intentionally, a very open-ended question. There is no “right” answer. The goal is for you to explore your plotting options, and settle on something reasonable. You can use base R, ggplot, or something else. You’ll likely have to look online for resources on plotting beyond what we covered in class.

This dataset lists characteristics of art sales. Download the file named “df_for_ml_improved_new_market” (NOT the “df_for_ml_improved_new_market_1” version!). For each of the following, produce a publication-ready plot which demonstrates the answer to the question. Use your plot to support an argument for your question.

Part (A) - Is there a change in the sales price in USD over time?
```{r}
library(ggplot2)
df <- read.csv("df_for_ml_improved_new_market.csv")

# calculate the average price_usd for each year
average_price_by_year <- df %>%
  group_by(year) %>%
  summarize(avg_price = mean(price_usd, na.rm = TRUE))

# plot the average price_usd over time
ggplot(average_price_by_year, aes(x = year, y = avg_price)) +
  geom_line(size = 1.2, color = "blue") + # thicker line and custom color
  geom_point(size = 3, color = "red", shape = 21, fill = "white") +  # larger points with a custom fill
  labs(title = "Average Sales Price Over Time", 
       x = "Year", 
       y = "Average Sales Price (USD)") +
  theme_minimal() + #. cleaner minimal theme
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),  # center title and adjust font size
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text = element_text(size = 12)  # adjust axis text size
  )
```
As shown above, there is a change in the sales price in USD over time. The average price increases steadily until 2004, surges sharply between 2005 and 2008, and then drops significantly after 2008. This is then followed by fluctuations that indicate stabilization at a higher price range compared to before 2004.


Part (B) - Does the distribution of genre of sales across years appear to change?
```{r}
df_long <- df %>%
  pivot_longer(cols = starts_with("Genre___"), 
               names_to = "genre", 
               values_to = "count") %>%
  filter(count == 1)  # assuming binary encoding (1 if sale in that genre, else 0)

# create stacked bar chart
ggplot(df_long, aes(x = year, fill = genre)) +
  geom_bar(position = "fill") +  # position fill for proportion stacking
  labs(title = "Distribution of Genre of Sales Across Years",
       x = "Year",
       y = "Proportion of Sales") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 16),
    axis.title.x = element_text(size = 14),
    axis.title.y = element_text(size = 14),
    axis.text = element_text(size = 12)
  )
```
As shown above, the distribution of genre sales across years does appear to change. Photography starts with a large share but gradually decreases over time, while Print shows a clear increase in proportion from 2000 onwards. Sculpture remains relatively stable, consistently holding a significant share. Painting decreases around 2000 and stays low, and Others maintains a small, steady presence.



Part (C) - How does the genre affect the change in sales price over time?
```{r}
df_long_genre_price <- df %>%
  pivot_longer(
    cols = starts_with("Genre___"),  # select columns starting with "Genre___"
    names_to = "genre",              # create new column named "genre"
    values_to = "count"              # store orig val in new column "count"
  ) %>%
  
  filter(count == 1) %>% # filter where count is 1 (presence of that genre)
  
  # group the data by year and genre to calculate average price in each group
  group_by(year, genre) %>%
  summarize(
    avg_price = mean(price_usd, na.rm = TRUE)  # calculate average prices
  ) %>%
  
  ungroup() # remove the grouping to return to a regular df 

# create line plot to visualize average price over time
ggplot(df_long_genre_price, aes(x = year, y = avg_price, color = genre)) +
  geom_line() +  # Plot lines for each genre showing avg_price over time
  labs(
    title = "Average Sales Price by Genre Over Time",  
    x = "Year",                                        
    y = "Average Price (USD)"                          
  ) +
  theme_minimal()  # apply a minimal theme
```
The above shows that Photography and Print experienced sharp price spikes around 2007-2008, reaching high average prices before a significant decline, indicating a period of heightened demand or market interest. Other genres, such as Painting, Sculpture, and Others, had lower and more stable average prices over time. By 2012, prices across all genres appear to stabilize, suggesting a normalization or market correction after the volatile period. This highlights the price volatility in certain genres and the impact of genre types on the change in sales price over time.

