---
title: "STATS 506 - Homework 5"
author: "Vincent Weng"
format:
  html:
    embed-resources: true
---

<h3>Problem 1 - OOP Programming</h3>

Part (A) - For the rational class, define the following:

1. A constructor
2. A validator that ensures the denominator is non-zero.
3. A show method.
4. A simplify method, to obtain the simplest form (e.g. simplify(2/4) produces 1/2).
5. A quotient method (e.g. quotient(3/7) produces .42857143...). It should support a digits argument but only in the printing, not the returned result (Hint: what does print return?).6. Addition, subtraction, multiplication, division. These should all return a rational.
7. You’ll (probably) need GCD and LCM as part of some of these calculations; include these functions using Rcpp. Even if you don’t need these functions for another calculation, include them.

```{r}
##' @title GCD Function
##' @param a and b
##' @return gcd output
gcd <- function(a, b) {
  while (b != 0) {
    t <- b
    b <- a %% b
    a <- t
  }
  abs(a)
}

# define rational S4 class
setClass("Rational",
         slots = list(numerator = "integer", denominator = "integer"),
         validity = function(object) {
           # check if denominator is zero
           if (object@denominator == 0) {
             stop("Denominator cannot be zero.")
           }
           # ensure both numerator and denominator are int
           if (!is.integer(object@numerator) || !is.integer(object@denominator)) {
             stop("Both numerator and denominator must be integers.")
           }
           TRUE
         })

# constructor function with validation
Rational <- function(numerator, denominator) {
  
  # check if numerator is a string and can be converted to an integer
  if (is.character(numerator)) {
    # attempt to convert to integer and check if the result is not NA
    converted_numerator <- suppressWarnings(as.integer(numerator))
    if (!is.na(converted_numerator)) {
      numerator <- converted_numerator
    } else {
      stop("Numerator must be convertible to an integer.")
    }
  }
  
  # check if denominator is a string and can be converted to an integer
  if (is.character(denominator)) {
    # attempt to convert to integer and check if the result is not NA
    converted_denominator <- suppressWarnings(as.integer(denominator))
    if (!is.na(converted_denominator)) {
      denominator <- converted_denominator
    } else {
      stop("Denominator must be convertible to an integer.")
    }
  }

  
  # checks that a vector of size 2 can be passed in
  if (is.numeric(numerator) && length(numerator) == 2) {
    denominator <- numerator[2]
    numerator <- numerator[1]
  }
  
  
  # ensure numerator and denominator are numeric and convert to int
  if (!is.numeric(numerator) || !is.numeric(denominator)) {
    stop("Both numerator and denominator must be numeric values.")
  }
  if (denominator == 0) {
    stop("Denominator cannot be zero.")
  }
  
  # convert to int
  numerator <- as.integer(numerator)
  denominator <- as.integer(denominator)
  
  # create new Rational object
  new("Rational", numerator = numerator, denominator = denominator)
}

# show method
setMethod("show", "Rational", function(object) {
  cat(object@numerator, "/", object@denominator, "\n")
})

# simplify method
setGeneric("simplify", function(object) standardGeneric("simplify"))
setMethod("simplify", "Rational", function(object) {
  gcd_val <- gcd(object@numerator, object@denominator)
  object@numerator <- as.integer(object@numerator / gcd_val)
  object@denominator <- as.integer(object@denominator / gcd_val)
  object
})

# quotient method with digits argument
setGeneric("quotient", function(object, digits = 6) standardGeneric("quotient"))
setMethod("quotient", "Rational", function(object, digits = 6) {
  round(as.numeric(object@numerator) / as.numeric(object@denominator), digits)
})

# arithmetic operations
setMethod("+", c("Rational", "Rational"), function(e1, e2) {
  denom <- as.integer(e1@denominator * e2@denominator)
  numer <- as.integer(e1@numerator * e2@denominator + e2@numerator * e1@denominator)
  simplify(Rational(numer, denom))
})

setMethod("-", c("Rational", "Rational"), function(e1, e2) {
  denom <- as.integer(e1@denominator * e2@denominator)
  numer <- as.integer(e1@numerator * e2@denominator - e2@numerator * e1@denominator)
  simplify(Rational(numer, denom))
})

setMethod("*", c("Rational", "Rational"), function(e1, e2) {
  simplify(Rational(as.integer(e1@numerator * e2@numerator), as.integer(e1@denominator * e2@denominator)))
})

setMethod("/", c("Rational", "Rational"), function(e1, e2) {
  if (e2@numerator == 0) stop("Division by zero.")
  simplify(Rational(as.integer(e1@numerator * e2@denominator), as.integer(e1@denominator * e2@numerator)))
})
```


Part (B) - Use your rational class to create three objects:

r1: 24/6
r2: 7/230
r3: 0/40

```{r}
# defining r1, r2, and r3
r1 <- Rational(24, 6)
r2 <- Rational(7, 230)
r3 <- Rational(0, 4)

# list of expressions to evaluate with tryCatch
expressions <- list(
  quote(r1),
  quote(r3),
  quote(r1 + r2),
  quote(r1 - r2),
  quote(r1 * r2),
  quote(r1 / r2),
  quote(r1 + r3),
  quote(r1 * r3),
  quote(r2 / r3),
  quote(quotient(r1)),
  quote(quotient(r2)),
  quote(quotient(r2, digits = 3)),
  quote(quotient(r2, digits = 3.14)),
  quote(quotient(r2, digits = "avocado")),
  quote(q2 <- quotient(r2, digits = 3)),
  quote(q2),
  quote(quotient(r3)),
  quote(simplify(r1)),
  quote(simplify(r2)),
  quote(simplify(r3))
)

# loop through each expression and evaluate with tryCatch
for (expr in expressions) {
  tryCatch({
    result <- eval(expr) # evaluate the expression
    print(result)        # print result if successful
  }, error = function(e) {
    cat("Error:", e$message, "\n") # print error message if error
  })
}

```

Part(C) - Show that your validator does not allow the creation of rational’s with 0 denominator, and check other malformed input to your constructor.
```{r error:true}
# valid example: should succeed
tryCatch({
  r1 <- Rational(24, 6)
  print(r1)
}, error = function(e) {
  cat("Error:", e$message, "\n")
})

# invalid example: denominator is zero
tryCatch({
  r2 <- Rational(3, 0)
  print(r2)
}, error = function(e) {
  cat("Error:", e$message, "\n") # expected message: "Denominator cannot be zero."
})

# invalid example: non-numeric input
tryCatch({
  r3 <- Rational("a", 4)
  print(r3)
}, error = function(e) {
  cat("Error:", e$message, "\n") # expected message: "Both numerator and denominator must be numeric values."
})

# invalid example: non-integer numeric input (will convert to integer if handled in Rational)
tryCatch({
  r4 <- Rational(3.5, 2.5)
  print(r4)
}, error = function(e) {
  cat("Error:", e$message, "\n")
})

# valid example: str inputs that can be converted to int will be converted to make the Rational object
tryCatch({
  r4 <- Rational("10", "4")
  print(r4)
}, error = function(e) {
  cat("Error:", e$message, "\n")
})


```
As shown above, the validator does not allow the creation of rationals with 0 denominator. Furthermore, it also checks that numerator and denominator are numeric inputs. Additionally, it also converts string inputs to integer if it is flexible, adding additional flexibility to the different inputs. Finally, it also checks that if floats are convertible to ints and converts it make a rational number.



<h3>Problem 2 - plotly</h3>

Let’s revisit the art data from the last problem set. Use plotly for these.

Part (A) - Regenerate your plot which addresses the second question from last time:

ii. Does the distribution of genre of sales across years appear to change?

You may copy your plot from last time, or copy my plot from the solutions, or come up with your own new plot.

```{r}
library(plotly)
library(dplyr)

# read in data
art <- read.csv("df_for_ml_improved_new_market.csv")

# create 'genre' column
art$Genre___Others[art$Genre___Painting == 1] <- 0
art$genre <- "Photography"
art$genre[art$Genre___Print == 1] <- "Print"
art$genre[art$Genre___Sculpture == 1] <- "Sculpture"
art$genre[art$Genre___Painting == 1] <- "Painting"
art$genre[art$Genre___Others == 1] <- "Other"

# create table and calculate proportions
yeargenre <- table(art$year, art$genre)
ygperc <- prop.table(yeargenre, 1)

# ensure correct order of genres
ygperc <- ygperc[, c("Painting", "Sculpture", "Photography", "Print", "Other")]

# convert to df for Plotly
ygperc_df <- as.data.frame(as.table(ygperc))
colnames(ygperc_df) <- c("Year", "Genre", "Proportion")

# create horizontal stacked bar chart
plot <- plot_ly(
  data = ygperc_df,
  x = ~Proportion,
  y = ~Year,
  color = ~Genre,
  type = "bar",
  orientation = "h",
  colors = c("pink", "lightblue", "lightgreen", "yellow", "orange")
) %>%
  layout(
    barmode = "stack",
    xaxis = list(title = "Proportion of Genre of Art Sales"),
    yaxis = list(title = "Year"),
    legend = list(title = list(text = "Genre"))
  )

plot
```
As shown above, the distribution of genre sales across years does appear to change. The bar chart shows the changing distribution of art sales proportions by genre from 1997 to 2012. Paintings (red) dominated in the late 1990s but steadily declined, while photography (green) rose significantly, especially after 2005. Sculptures (blue) remained relatively stable, with minor fluctuations, and prints (yellow) gained a small but noticeable increase after 2010. The "Other" category (orange) consistently contributed a minimal share. These trends highlight shifts in buyer preferences and market dynamics over the 15-year period.


Part (B) - Generate an interactive plot with plotly that can address both of these questions from last time.

i. Is there a change in the sales price in USD over time?

ii. How does the genre affect the change in sales price over time?

This should be a single interactive plot, with which a user can manipulate the view to be able to look at change over time overall, or by genre.


Plotting first graph
```{r}
library(plotly)

# read in the data
art <- read.csv("df_for_ml_improved_new_market.csv")

# function to select top values above a given percentile
select_top_values <- function(vec, percentile) {
  val <- quantile(vec, percentile)
  return(vec[vec > val])
}

# prepare data for the box plot
save <- list()
for (y in unique(art$year)) {
  prices <- art[art$year == y, "price_usd"]
  save[[as.character(y)]] <- 
    data.frame(year = y,
               price_usd = select_top_values(prices, 0.95))
}
arttop <- do.call(rbind, save)

# prepare data for the median line
artmedian <- aggregate(art$price_usd, by = list(art$year), FUN = median, na.rm = TRUE)
names(artmedian) <- c("year", "price_usd")

# create Plotly plot
plot <- plot_ly() %>%
  add_trace(
    data = arttop,
    x = ~year,
    y = ~price_usd,
    type = "box",
    name = "Top 5%",
    marker = list(symbol = "x")
  ) %>%
  add_trace(
    data = artmedian,
    x = ~year,
    y = ~price_usd,
    type = "scatter",
    mode = "lines+markers",
    line = list(dash = "dot", width = 2),
    name = "Median"
  ) %>%
  layout(
    title = "Changes in Top 5% of Prices",
    xaxis = list(title = "Year"),
    yaxis = list(
      title = "Price in Million USD",
      tickvals = seq(0, 1400000, by = 200000),
      ticktext = paste(seq(0, 1.4, 0.2), "M", sep = "")
    ),
    legend = list(x = 0.1, y = 0.9)
  )

# render the plot
plot
```
As shown above, there is a change in the sales price in USD over time. The boxplots reveal an upward trend in the top 5% of prices, with the interquartile range (IQR) and outliers expanding significantly in later years, particularly after 2005, indicating increasing variability and higher extreme values. The dashed line representing the median remains relatively low and stable in comparison, emphasizing the disparity between the top 5% and the overall price distribution. The chart suggests that the top 5% of prices have risen considerably over the years, with the rise becoming more pronounced in the mid-2000s.



Plotting second graph
```{r}
library(plotly)

# read in the data
art <- read.csv("df_for_ml_improved_new_market.csv")

# map genre values
art$Genre___Others[art$Genre___Painting == 1] <- 0
art$genre <- "Photography"
art$genre[art$Genre___Print == 1] <- "Print"
art$genre[art$Genre___Sculpture == 1] <- "Sculpture"
art$genre[art$Genre___Painting == 1] <- "Painting"
art$genre[art$Genre___Others == 1] <- "Other"

# prepare the median and 97.5th percentile data by genre and year
artmedian <- aggregate(price_usd ~ year + genre, data = art, FUN = median, na.rm = TRUE)
art975 <- aggregate(price_usd ~ year + genre, data = art, FUN = function(x) quantile(x, 0.975, na.rm = TRUE))

# initialize Plotly figure
plot1 <- plot_ly()

# add lines for each genre for median and 97.5th percentile
genres <- unique(art$genre)
for (i in seq_along(genres)) {
  genre <- genres[i]
  
  # median line
  plot1 <- plot1 %>%
    add_trace(
      data = artmedian[artmedian$genre == genre, ],
      x = ~year,
      y = ~price_usd,
      type = "scatter",
      mode = "lines",
      line = list(color = i, width = 3),
      name = paste("Median", genre)
    )
  
  # 97.5th percentile line
  plot1 <- plot1 %>%
    add_trace(
      data = art975[art975$genre == genre, ],
      x = ~year,
      y = ~price_usd,
      type = "scatter",
      mode = "lines",
      line = list(color = i, dash = "dot", width = 3),
      name = paste("97.5% Percentile", genre)
    )
}

# add layout elements
plot1 <- plot1 %>%
  layout(
    title = "Changes in Price by Genre",
    xaxis = list(title = "Year", tickvals = seq(1997, 2012, by = 2)),
    yaxis = list(
      title = "Price in Thousands USD",
      tickvals = seq(0, 350000, by = 50000),
      ticktext = paste(seq(0, 350, by = 50), "k", sep = "")
    ),
    legend = list(x = 0.1, y = 0.9)
  )

# render the plot
plot1
```
The graph shows that genre impacts sales prices significantly over time. Sculpture and Painting display consistent growth in both median and 97.5th percentile prices, indicating stability and sustained value. Photography and Print, however, show sharp spikes in the 97.5th percentile, reflecting occasional high-value sales and greater volatility. The "Other" category remains the lowest in price with minimal growth.


Generating an interactive plot
```{r}
# combine the two plot objects into one
combined_graph <- plot_ly() |>
  # add traces from the first plot (Top 5% boxplot data)
  add_trace(
    data = arttop, # dataset for Top 5% prices
    x = ~year,
    y = ~price_usd,
    type = "box",
    name = "Top 5%",
    visible = TRUE
  ) |>
  add_trace(
    data = artmedian, # use `artmedian` for the median line
    x = ~year,
    y = ~price_usd,
    type = "scatter",
    mode = "lines+markers",
    line = list(dash = "dot", width = 2),
    name = "Median",
    visible = TRUE
  ) |>
  # add traces from the second plot (Genre-based scatter plot)
  add_trace(
    data = artmedian, # median data for genre-based plot
    x = ~year,
    y = ~price_usd,
    type = "scatter",
    mode = "lines",
    color = ~genre,
    name = "Genre Median",
    visible = FALSE
  ) |>
  add_trace(
    data = art975, # 97.5th percentile data for genre-based plot
    x = ~year,
    y = ~price_usd,
    type = "scatter",
    mode = "lines",
    line = list(dash = "dot"),
    color = ~genre,
    name = "97.5% Percentile",
    visible = FALSE
  )

# add layout and dropdown menu
combined_graph <- combined_graph |>
  layout(
    xaxis = list(title = "Year"),
    yaxis = list(title = "Price (USD)"),
    updatemenus = list(
      list(
        y = 1,
        buttons = list(
          list(
            method = "update",
            args = list(
              list(visible = c(TRUE, TRUE, FALSE, FALSE)), # Show Top 5% and Median traces
              list(title = "Top 5% of Sales Price of Art over the Years")
            ),
            label = "Overall"
          ),
          list(
            method = "update",
            args = list(
              list(visible = c(FALSE, FALSE, TRUE, TRUE)), # Show genre-based traces
              list(title = "Change in Art Price over the Years by Genre")
            ),
            label = "By Genre"
          )
        )
      )
    )
  )

# render combined graph
combined_graph
```
As shown above, there is a change in the sales price in USD over time. 







<h3>Problem 3 - data.table</h3>

Part (A) - Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

Additionally,

Order both tables in descending mean delay.
Both tables should use the airport names not the airport codes.
Both tables should print all rows.
```{r}
library(nycflights13)
library(data.table)

# convert flights to a data.table
flights <- data.table(flights)

# merge flights with airports by the "faa" column
merged <- merge(flights[, faa := origin],
                airports,
                by = "faa",
                all.x = TRUE)

# calculate statistics and filter results
merged[, .(N = .N,
           mean_delay = mean(dep_delay, na.rm = TRUE),
           med_delay = median(dep_delay, na.rm = TRUE)),
       by = name] |>
  (\(x) x[N >= 10, !"N"])() |>
  (\(x) x[order(mean_delay, decreasing = TRUE)])()


# convert flights to a data.table
flights <- data.table(flights)

# merge flights with airports by the "faa" column, using "dest" as the faa
merged <- merge(flights[, faa := dest],
                airports,
                by = "faa",
                all.x = TRUE)

# calculate statistics and filter the results
merged[, .(
    name = ifelse(is.na(first(name)), first(faa), first(name)),
    N = .N,
    mean_delay = mean(arr_delay, na.rm = TRUE),
    med_delay = median(arr_delay, na.rm = TRUE)
), by = faa] |>
  (\(x) x[N >= 10, !c("faa", "N")])() |>
  (\(x) x[order(mean_delay, decreasing = TRUE)])() |>
  (\(x) print(x, nrows = 10000))()
```


Part (B) - How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.
```{r}
library(data.table)

# Convert data.frames to data.tables
flights_dt <- as.data.table(flights)
planes_dt <- as.data.table(planes)

# using data.table
result <- flights_dt[
  planes_dt, 
  on = "tailnum"  # Join by "tailnum"
][
  , mph := distance / (air_time / 60)  # Calculate mph
][
  # calculate avg_mph and num_flights
  , .(avg_mph = mean(mph, na.rm = TRUE), num_flights = .N), by = model
][
  order(-avg_mph)  # order by avg_mph descending
][
  1  # select first row
]

print(result)
```
As shown above, the aircraft model with the fastest average speed took 4 flights.

