---
title: "STATS 506 - Homework 3"
author: "Vincent Weng"
format:
  html:
    embed-resources: true
---

<h3>Problem 1 - Vision</h3>

Part (A) - Download the file VIX_D from this location, and determine how to read it into R. Then download the file DEMO_D from this location. Note that each page contains a link to a documentation file for that data set. Merge the two files to create a single data.frame, using the SEQN variable for merging. Keep only records which matched. Print out your total sample size, showing that it is now 6,980.
```{r}
library(haven)

vix_d <- read_xpt("/Users/vincentweng/Documents/STATS-506/HW3/VIX_D.XPT")
demo_d <- read_xpt("/Users/vincentweng/Documents/STATS-506/HW3/DEMO_D.XPT")

vision <- merge(vix_d, demo_d, by = "SEQN", all = FALSE)

print(nrow(vision))
```


Part (B) - Without fitting any models, estimate the proportion of respondents within each 10-year age bracket (e.g. 0-9, 10-19, 20-29, etc) who wear glasses/contact lenses for distance vision. Produce a nice table with the results.
```{r}
colnames(vision)[colnames(vision) == "VIQ200"] <- "glasses"
colnames(vision)[colnames(vision) == "RIDAGEYR"] <- "age"

# Viewing only the renamed columns
vision_subset <- vision[, c("glasses", "age")]

# Display the subset
print(vision_subset)
```



Part(C) - Fit three logistic regression models predicting whether a respondent wears glasses/contact lenses for distance vision. Predictors:

1. age
2. age, race, gender
3. age, race, gender, Poverty Income ratio

Produce a table presenting the estimated odds ratios for the coefficients in each model, along with the sample size for the model, the pseudo-$R^2$, and AIC values.
```{r}

```




Part(D) - From the third model from the previous part, test whether the odds of men and women being wears of glasess/contact lenses for distance vision differs. Test whether the proportion of wearers of glasses/contact lenses for distance vision differs between men and women. Include the results of the each test and their interpretation.
```{r}

```





<h3>Problem 2 - Sakila</h3>

```{r}
library(DBI)
library(RSQLite)

sakila <- dbConnect(RSQLite::SQLite(), "sakila_master.db")
```

Part(A) - What is the oldest movie (earliest release year) in the database? Answer this with a single SQL query.
```{r}
tables <- dbListTables(sakila)
print(tables)

columns <- dbListFields(sakila, "film")
print(columns)

dbGetQuery(sakila, "
  SELECT title, release_year
  FROM film
  ORDER BY release_year DESC
  LIMIT 1
")
```


Part(B) - What genre of movie is the least common in the data, and how many movies are of this genre?
```{r}
tables <- dbListTables(sakila)
print(tables)

columns <- dbListFields(sakila, "category")
print(columns)

columns <- dbListFields(sakila, "film_category")
print(columns)

dbGetQuery(sakila, "
  SELECT c.name, COUNT(c.category_id)
  FROM category AS c
  JOIN film_category AS fc ON c.category_id = fc.category_id
  GROUP BY c.category_id
  ORDER by COUNT(c.category_id) DESC
  LIMIT 1
")
```
The lease common genrie in the data is "Sports" and there are 74 movies in this genre.



Part(C) - Identify which country or countries have exactly 13 customers.
```{r}
columns <- dbListFields(sakila, "customer")
print(columns)

columns <- dbListFields(sakila, "city")
print(columns)

columns <- dbListFields(sakila, "address")
print(columns)

columns <- dbListFields(sakila, "country")
print(columns)

dbGetQuery(sakila, "
  SELECT co.country, count(co.country)
  FROM country AS co
  JOIN city AS ci ON co.country_id = ci.country_id
  JOIN address AS ad ON ci.city_id = ad.city_id
  JOIN customer as cu ON ad.address_id = cu.address_id
  GROUP BY co.country
  HAVING count(co.country) == 13
")
```
Argentina and Nigeria have exactly 13 customers.





<h3>Problem 3 - US Records</h3>

Part(A) - What proportion of email addresses are hosted at a domain with TLD “.com”? (in the email, “angrycat@freemail.org”, “freemail.org” is the domain, and “.org” is the TLD (top-level domain).)
```{r}
us_records <- read.csv("us-500.csv")
count <- sum(grepl("\\.com$", us_records$email))
print(count/nrow(us_records))
```


Part(B) - What proportion of email addresses have at least one non alphanumeric character in them? (Excluding the required “@” and “.” found in every email address.)
```{r}
# remove "@" and "." from each email
clean <- gsub("[@.]", "", us_records$email)

# check for non-alphanumeric characters
non_alphanumeric <- grepl("[^a-zA-Z0-9]", clean)

# count emails with non-alphanumeric characters
count <- sum(non_alphanumeric)

# prints out calculated proportion
print(count/nrow(us_records))
```


Part(C) - What are the top 5 most common area codes amongst all phone numbers? (The area code is the first three digits of a standard 10-digit telephone number.)
```{r}
phone_numbers <- c(us_records$phone1, us_records$phone2)
area_codes <- substr(phone_numbers, 1, 3)
area_code_counts <- table(area_codes)
top_five <- sort(area_code_counts, decreasing = TRUE)[1:5]
print(top_five)
```
The top 5 most common area codes are "973", "212", "215", "410", and "201".




Part(D) - Produce a histogram of the log of the apartment numbers for all addresses. (You may assume any number at the end of the an address is an apartment number.)
```{r}
apt <- us_records$address[grepl("[0-9]+$", us_records$address)]
nums <- sapply(strsplit(apt, " "), function(x) x[length(x)])
nums <- as.numeric(gsub("#", "", nums))
hist(log(nums))
```



Part(E) - Benford’s law is an observation about the distribution of the leading digit of real numerical data. Examine whether the apartment numbers appear to follow Benford’s law. Do you think the apartment numbers would pass as real data?
```{r}
leading_digit_counts <- table(substr(nums, 1, 1))

# normalize the counts to get observed frequencies
observed_freq <- leading_digit_counts / sum(leading_digit_counts)

# calculate expected frequencies based on Benford's Law
benford_probs <- log10((1:9) + 1) - log10(1:9)
benford_freq <- benford_probs / sum(benford_probs)

# create a data frame for comparison
comparison_df <- data.frame(
  Digit = 1:9,
  Observed = as.numeric(observed_freq[1:9]),
  Expected = benford_freq
)

print(comparison_df)
```

From the above results, the observed distribution does not closely follow Benford's Law

