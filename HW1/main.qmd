---
title: "STATS 506 - Homework 1"
author: "Vincent Weng"
format: html
---

GitHub Repository Link: https://github.com/VAweng02/STATS-506

Problem 1 - Wine Data
Part (A)
```{r}
wine_data <- read.table("wine.data", sep = ",")
colnames(wine_data) <- c("Class", "Alcohol", "Malic_Acid", "Ash", "Alcalinity_of_Ash", 
                         "Magnesium", "Total_Phenols", "Flavanoids", "Nonflavanoid_Phenols",
                         "Proanthocyanins", "Color_Intensity", "Hue", 
                         "OD280/OD315_of_Diluted_Wines", "Proline")
```

Part (B)
```{r}
class1_count <- sum(wine_data$Class == 1)
class2_count <- sum(wine_data$Class == 2)
class3_count <- sum(wine_data$Class == 3)

cat("Class 1 count:", class1_count, "\n",
    "Class 2 count:", class2_count, "\n",
    "Class 3 count:", class3_count, "\n")
```

Part (C)
```{r}
# Question 1
corr <- cor(wine_data$Alcohol, wine_data$Color_Intensity)
cat("Total correlation:", corr, "\n")

# Question 2
# Finding correlation between alcohol content and color intensity for class 1
class1_data <- wine_data[wine_data$Class == 1, ]
class1_corr <- cor(class1_data$Alcohol, class1_data$Color_Intensity)
cat("Class 1 correlation:", class1_corr, "\n")

# Finding correlation between alcohol content and color intensity for class 2
class2_data <- wine_data[wine_data$Class == 2, ]
class2_corr <- cor(class2_data$Alcohol, class2_data$Color_Intensity)
cat("Class 2 correlation:", class2_corr, "\n")

# Finding correlation between alcohol content and color intensity for class 3
class3_data <- wine_data[wine_data$Class == 3, ]
class3_corr <- cor(class3_data$Alcohol, class3_data$Color_Intensity)
cat("Class 3 correlation:", class3_corr, "\n")

# Question 3
max_color_intensity = max(wine_data$Color_Intensity)
max_color_intensity_filtered <- wine_data[wine_data$Color_Intensity == max_color_intensity, ]
cat("Highest color intensity:", max_color_intensity, "\n")
cat("Alcohol content of highest color intensity:", max_color_intensity_filtered$Alcohol, "\n")

# Question 4
proanth_greater_than_ash <- sum(wine_data$Proanthocyanins > wine_data$Ash)
percent_proanth_greater_than_ash <- (proanth_greater_than_ash / nrow(wine_data)) * 100
cat("Percentage of wines with higher content of proanthocyanins than ash:", percent_proanth_greater_than_ash, "\n")
```

Part (D)
```{r}
overall_avg_row <- colMeans(wine_data)
avg_df <- as.data.frame(t(overall_avg_row))
rownames(avg_df) <- "Overall"

for (i in 1:3) {
  class_data <- wine_data[wine_data$Class == i, ]
  class_avg_row <- colMeans(class_data)
  class_avg_df <- as.data.frame(t(class_avg_row))
  rownames(class_avg_df) <- paste("Class", i)
  avg_df <- rbind(avg_df, class_avg_df)
}

avg_df
```


Part (E)
```{r}
class_1 <- wine_data$Total_Phenols[wine_data$Class == 1]
class_2 <- wine_data$Total_Phenols[wine_data$Class == 2]
class_3 <- wine_data$Total_Phenols[wine_data$Class == 3]

t_test_1_2 <- t.test(class_1, class_2)
t_test_1_3 <- t.test(class_1, class_3)
t_test_2_3 <- t.test(class_2, class_3)

print(t_test_1_2)
print(t_test_1_3)
print(t_test_2_3)
```





Problem 2 - AskAManager.org Data
Part (A)
```{r}
askamanager_data <- read.csv("AskAManager.csv", sep = ",")
```

Part (B)
```{r}
colnames(askamanager_data) <- c("X",
                                "Timestamp",
                                "Age_Range",
                                "Industry",
                                "Job_Title",
                                "Job_Context",
                                "Annual_Salary",
                                "Additional_Compensation",
                                "Currency",
                                "Other_Currency",
                                "Income_Context",
                                "Country",
                                "US_State",
                                "City",
                                "Total_Experience_Years",
                                "Field_Experience_Years",
                                "Highest_Education",
                                "Gender",
                                "Race"
                              )
```

Part (C)
```{r}
num_rows_before <- nrow(askamanager_data)
askamanager_data <- askamanager_data[askamanager_data$Currency == 'USD',]
num_rows_after <- nrow(askamanager_data)

cat("Number of rows before filtering:", num_rows_before, "\nNumber of rows after filtering:", num_rows_after)
```

Part (D)
```{r}
split_age <- strsplit(as.character(askamanager_data[["Age_Range"]]), "-")
askamanager_data$Age_Min <- as.numeric(sapply(split_age, `[`, 1))

num_rows_before <- nrow(askamanager_data)
askamanager_data_filtered <- askamanager_data[askamanager_data$Age_min >= 18 &
                                              askamanager_data$Total_Experience_Years <= (askamanager_data$Age_min - 18) &
                                              askamanager_data$Field_Experience_Years <= askamanager_data$Total_Experience_Years, ]
num_rows_after <- nrow(askamanager_data_filtered)
cat("Number of rows before filtering:", num_rows_before, "\nNumber of rows after filtering:", num_rows_after)

```

Part (E)
```{r}
summary(askamanager_data$Annual_Salary)

lower_threshold <- 10000
upper_threshold <- 1000000

askamanager_data_filtered <- askamanager_data[askamanager_data$Annual_Salary >= lower_threshold & askamanager_data$Annual_Salary <= upper_threshold, ]

final_sample_size <- nrow(askamanager_data_filtered)
cat("Final sample size after filtering:", final_sample_size, "\n")
```




Problem 3 - Palindromic Numbers
Part(A)
```{r}
# Description:
#   Checks if a given positive integer is a palindrome
# Arguments:
#   int - a positive integer
# Returns:
#   List containing 2 elements: isPalindromic (boolean indicating if the input is palindromic), reversed (Input with its digits reversed)
isPalindromic <- function(int) {
  if (!is.numeric(int) || floor(int) != int || int <= 0) {
    stop("Input must be a positive integer.")
  }
  
  output_list <- list()
  str <- as.character(int)
  
  start <- 1
  end <- nchar(str)
  
  is_palindromic <- TRUE
  while (start < end) {
    if (substr(str, start, start) != substr(str, end, end)) {
      is_palindromic <- FALSE
      break
    }
    start <- start + 1
    end <- end - 1
  }
  output_list <- append(output_list, is_palindromic)
  
  reversed <- ""
  for (i in nchar(str):1) {
    reversed <- paste0(reversed, substr(str, i, i))
  }
  reversed <- as.numeric(reversed)
  output_list <- append(output_list, reversed)
}

result <- isPalindromic(729927)
result

result <- isPalindromic(39951)
result
```

Part(B)
```{r}
# Description:
#   Finds the next palindrome number strictly greater than the input
# Arguments:
#   int - a positive integer
# Returns:
#   a vector of length 1 with the next palindrome number greater than the input
nextPalindrome <- function(int) {
  if (!is.numeric(int) || floor(int) != int || int <= 0) {
    stop("Input must be a positive integer.")
  }
  
  next_int <- int + 1
  while (!isPalindromic(next_int)[[1]]) {
    next_int <- next_int + 1
  }
  
  return(c(next_int))
}

nextPalindrome(7152)
nextPalindrome(765431537)
```

Part(C)
```{r}
nextPalindrome(391)
nextPalindrome(9928)
nextPalindrome(19272719)
nextPalindrome(109)
nextPalindrome(2)
```
