---
title: "STATS 506 - Homework 1"
author: "Vincent Weng"
format: html
---

GitHub Repository Link: https://github.com/VAweng02/STATS-506

<h3>Problem 1 - Wine Data</h3>
Part (A) - Import the data into a data.frame in R. Use the information in the “wine.names” file to give appropriate column names. (Note: Downloading and unzipping the file can take place outside of your submitted document, but importing the file should be in the submission.)
```{r}
# "wine.data" is read into a R data frame called "wine_data"
wine_data <- read.table("wine.data", sep = ",")

# Appropriate column names are assigned 
colnames(wine_data) <- c("Class", "Alcohol", "Malic_Acid", "Ash", "Alcalinity_of_Ash", 
                         "Magnesium", "Total_Phenols", "Flavanoids", "Nonflavanoid_Phenols",
                         "Proanthocyanins", "Color_Intensity", "Hue", 
                         "OD280/OD315_of_Diluted_Wines", "Proline")
```

Part (B) - The data contains information on three different classes of wine. Check and report that the number of wines within each class is correct as reported in “wine.names”.
```{r}
# Counting number of rows in 'wine_data' for each class
class1_count <- sum(wine_data$Class == 1)
class2_count <- sum(wine_data$Class == 2)
class3_count <- sum(wine_data$Class == 3)

# Printing out out the results
cat("Class 1 count:", class1_count, "\n",
    "Class 2 count:", class2_count, "\n",
    "Class 3 count:", class3_count, "\n")
```
The number of wines within each class is correct and double checked as reported in "wine.names".

Part (C) - Use the data to answer the following questions:
1. What is the correlation between alcohol content and color intensity?
2. Which class has the highest correlation? Which has the lowest?
3. What is the alcohol content of the wine with the highest color intensity?
4. What percentage of wines had a higher content of proanthocyanins compare to ash?

```{r}
# Finding correlation between alcohol content and color intensity
corr <- cor(wine_data$Alcohol, wine_data$Color_Intensity)
cat("Total correlation:", corr, "\n")

# Finding correlation between alcohol content and color intensity for class 1
class1_data <- wine_data[wine_data$Class == 1, ]
class1_corr <- cor(class1_data$Alcohol, class1_data$Color_Intensity)
cat("Class 1 correlation:", class1_corr, "\n")

# Finding correlation between alcohol content and color intensity for class 2
class2_data <- wine_data[wine_data$Class == 2, ]
class2_corr <- cor(class2_data$Alcohol, class2_data$Color_Intensity)
cat("Class 2 correlation:", class2_corr, "\n")

# Finding correlation between alcohol content and color intensity for class 3
class3_data <- wine_data[wine_data$Class == 3, ]
class3_corr <- cor(class3_data$Alcohol, class3_data$Color_Intensity)
cat("Class 3 correlation:", class3_corr, "\n")

# Finding highest color intensity 
max_color_intensity = max(wine_data$Color_Intensity)

# Filtering the row with the highest color intensity
max_color_intensity_filtered <- wine_data[wine_data$Color_Intensity == max_color_intensity, ]
cat("Highest color intensity:", max_color_intensity, "\n")
cat("Alcohol content of highest color intensity:", max_color_intensity_filtered$Alcohol, "\n")

# Finding number of rows where proanthocyanins > ash and dividing that by total number of rows to get a percentage
proanth_greater_than_ash <- sum(wine_data$Proanthocyanins > wine_data$Ash)
percent_proanth_greater_than_ash <- (proanth_greater_than_ash / nrow(wine_data)) * 100
cat("Percentage of wines with higher content of proanthocyanins than ash:", percent_proanth_greater_than_ash, "\n")
```
1. The correlation between alcohol content and color intensity is 0.5463642.
2. Class 1 has the highest correlation and class 2 has the lowest correlation.
3. The alcohol content of the wine with the highest color intensity is 14.34.
4. The percentage of wines had a higher content of proanthocyanins compare to ash is 8.426966.

Part (D) - Create a table identifying the average value of each variable, providing one row for the overall average, and one row per class with class averages. (This table does not need to be “fancy” but should clearly identify what each value represents.)
```{r}
# Creating a row for overall average value of each variable
overall_avg_row <- colMeans(wine_data)
avg_df <- as.data.frame(t(overall_avg_row))
rownames(avg_df) <- "Overall"

# Creating a row overall average value of each variable per class
for (i in 1:3) {
  class_data <- wine_data[wine_data$Class == i, ]
  class_avg_row <- colMeans(class_data)
  class_avg_df <- as.data.frame(t(class_avg_row))
  rownames(class_avg_df) <- paste("Class", i)
  avg_df <- rbind(avg_df, class_avg_df)
}

avg_df
```


Part (E) - Carry out a series of t-tests to examine whether the level of phenols differs across the three classes. Present the R output and interpret the results.
```{r}
class_1 <- wine_data$Total_Phenols[wine_data$Class == 1]
class_2 <- wine_data$Total_Phenols[wine_data$Class == 2]
class_3 <- wine_data$Total_Phenols[wine_data$Class == 3]

t_test_1_2 <- t.test(class_1, class_2)
t_test_1_3 <- t.test(class_1, class_3)
t_test_2_3 <- t.test(class_2, class_3)

print(t_test_1_2)
print(t_test_1_3)
print(t_test_2_3)
```
All three t-tests show statistically significant differences in phenol levels between the classes.The largest difference is observed between Class 1 and Class 3, while (Class 1 and Class 2) and (Class 2 and Class 3) have smaller, but still significant differences. Overall, these results show that the phenol levels are significantly different across the three wine classes.


<h3>Problem 2 - AskAManager.org Data</h3>
Part (A) - Import the data into a data.frame in R. As with the wine data, you may download the data outside of your submission, but importation should take place inside the problem set submission.
```{r}
# "AskAManager.csv" is read into a R data frame called "askamanager_data"
askamanager_data <- read.csv("AskAManager.csv", sep = ",")
```

Part (B) - Clean up the variable names. Simplify them.
```{r}
# Column names are simplified and renamed 
colnames(askamanager_data) <- c("X",
                                "Timestamp",
                                "Age_Range",
                                "Industry",
                                "Job_Title",
                                "Job_Context",
                                "Annual_Salary",
                                "Additional_Compensation",
                                "Currency",
                                "Other_Currency",
                                "Income_Context",
                                "Country",
                                "US_State",
                                "City",
                                "Total_Experience_Years",
                                "Field_Experience_Years",
                                "Highest_Education",
                                "Gender",
                                "Race"
                              )
```

Part (C) - Restrict the data to those being paid in US dollars (USD). Show that it worked by confirming the number of observations before and after restricting the data.
```{r}
num_rows_before <- nrow(askamanager_data)
# Filtering rows where "Currency" is in US dollars (USD)
askamanager_data_filtered <- askamanager_data[askamanager_data$Currency == 'USD',]
num_rows_after <- nrow(askamanager_data_filtered)

cat("Number of rows before restriction:", num_rows_before, "\nNumber of rows after restriction:", num_rows_after)
```

Part (D) - Assume no one starts working before age 18. Eliminate any rows for which their age, years of experience in their field, and years of experience total are impossible. Again, confirm the number of observations.
```{r}
# Removing the "years" substring from "Total_Experience_Years" and "Field_Experience_Years"
askamanager_data$Total_Experience_Years <- gsub("[^0-9-]", "", askamanager_data$Total_Experience_Years)
askamanager_data$Field_Experience_Years <- gsub("[^0-9-]", "", askamanager_data$Field_Experience_Years)

# Splitting the ranges at "-" to extract the max of the range
split_age <- strsplit(as.character(askamanager_data[["Age_Range"]]), "-")
split_total_exp <- strsplit(as.character(askamanager_data[["Total_Experience_Years"]]), "-")
split_field_exp <- strsplit(as.character(askamanager_data[["Field_Experience_Years"]]), "-")

# Converting the number after the "-" into numeric, so it can be used as a filtering condition
askamanager_data$Age_Max <- as.numeric(sapply(split_age, `[`, 2))
askamanager_data$Total_Exp_Max <- as.numeric(sapply(split_total_exp, `[`, 2))
askamanager_data$Field_Exp_Max <- as.numeric(sapply(split_field_exp, `[`, 2))


num_rows_before <- nrow(askamanager_data)

# Filtering rows where the age is greater than or equal to 18 (sinceno one starts working before age 18)
askamanager_data_filtered <- subset(askamanager_data, Age_Max >= 18)

# Filtering rows where the field experience years cannot exceed the total experience years
askamanager_data_filtered <- subset(askamanager_data, Total_Experience_Years >= Field_Experience_Years)

# Filtering rows where the number of years after 18 cannot exceed the total experience years
askamanager_data_filtered <- subset(askamanager_data, Age_Max - 18 >= Total_Experience_Years)

num_rows_after <- nrow(askamanager_data_filtered)                 
                                                
cat("Number of rows before filtering:", num_rows_before, "\nNumber of rows after filtering:", num_rows_after)

```

Part (E) - A lot of the incomes are likely false. Eliminate any rows with extremely low or extremely high salaries. I’ll leave the decision of what thresholds to use up to you; you could choose to eliminate only impossible values, or you could restrict the sample to eliminate the extreme values even if they are realistic (e.g. removing the billionaires or the folks making < $1,000 per year). You must justify your choice, along with either a cited source or an exploration the data, or some combination.
```{r}
summary(askamanager_data$Annual_Salary)
# Finding Annual Salary mean
salary_mean <- mean(askamanager_data$Annual_Salary, na.rm = TRUE)
# Finding Annual Salary standard deviation
salary_sd <- sd(askamanager_data$Annual_Salary, na.rm = TRUE)

# Initializing upper and lower bounds
lower_thres <- salary_mean - 2 * salary_sd
upper_thres <- salary_mean + 2 * salary_sd

# Filtering based on those thresholds and greater than $1000
askamanager_data_filtered <- askamanager_data[
  askamanager_data$Annual_Salary >= lower_thres & 
  askamanager_data$Annual_Salary <= upper_thres & 
  askamanager_data$Annual_Salary > 1000, 
]

summary(askamanager_data_filtered$Annual_Salary)

final_sample_size <- nrow(askamanager_data_filtered)
cat("Final sample size after filtering:", final_sample_size, "\n")
```
The final sample size is 27944. The method that I used is using standard deviation to create my thresholds. I used a standard deviation of 2 so that filtering based on 2 standard deviations above and below will yield about 95% of the annual salaries. Furthermore, I filtered out annual salaries of $1000 or below, which I think is a reasonable lower bound to eliminate the extremely low salaries (of which also eliminates annual salaries that are equal to 0). The summary box before the filtering showed that the max was nearly 6 billion dollars, which is far too extreme. After the filtering, the max is now 43.8 million dollars, which is still really high, but not completely out of the blue if its a rare high earner.


<h3>Problem 3 - Palindromic Numbers</h3>
Part(A) - Write function isPalindromic that checks if a given positive integer is a palindrome. Be sure to provide a reasonable error on an invalid input. Be sure to document your function (see instructions above).

Input: A positive integer
Output: A list with two elements:
isPalindromic: A logical value indicating if the input is palindromic.
reversed: The input with its digits reversed.
```{r}
# Description:
#   Checks if a given positive integer is a palindrome
# Arguments:
#   int - a positive integer
# Returns:
#   List containing 2 elements: isPalindromic (boolean indicating if the input is palindromic), reversed (Input with its digits reversed)
isPalindromic <- function(int) {
  if (!is.numeric(int) || floor(int) != int || int <= 0) {
    stop("Input must be a positive integer.")
  }
  
  output_list <- list()
  str <- as.character(int)
  
  start <- 1
  end <- nchar(str)
  
  is_palindromic <- TRUE
  while (start < end) {
    if (substr(str, start, start) != substr(str, end, end)) {
      is_palindromic <- FALSE
      break
    }
    start <- start + 1
    end <- end - 1
  }
  output_list <- append(output_list, is_palindromic)
  
  reversed <- ""
  for (i in nchar(str):1) {
    reversed <- paste0(reversed, substr(str, i, i))
  }
  reversed <- as.numeric(reversed)
  output_list <- append(output_list, reversed)
}

result <- isPalindromic(729927)
result

result <- isPalindromic(39951)
result
```

Part(B) - Create a function nextPalindrome that finds the next palindromic number strictly greater than the input. Be sure to provide a reasonable error on an invalid input.

Input: A positive integer
Output: A vector of length 1 with the next palindromic number greater than the input
```{r}
# Description:
#   Finds the next palindrome number strictly greater than the input
# Arguments:
#   int - a positive integer
# Returns:
#   a vector of length 1 with the next palindrome number greater than the input
nextPalindrome <- function(int) {
  if (!is.numeric(int) || floor(int) != int || int <= 0) {
    stop("Input must be a positive integer.")
  }
  
  next_int <- int + 1
  while (!isPalindromic(next_int)[[1]]) {
    next_int <- next_int + 1
  }
  
  return(c(next_int))
}

nextPalindrome(7152)
nextPalindrome(765431537)
```

Part(C) - Use these functions to find the next palindrome for each of the following:
```{r}
nextPalindrome(391)
nextPalindrome(9928)
nextPalindrome(19272719)
nextPalindrome(109)
nextPalindrome(2)
```
